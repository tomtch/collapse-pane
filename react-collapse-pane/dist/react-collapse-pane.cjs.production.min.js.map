{"version":3,"file":"react-collapse-pane.cjs.production.min.js","sources":["../src/hooks/useMergeClasses.ts","../src/components/Pane/index.tsx","../src/components/Resizer/helpers.tsx","../src/components/Resizer/hooks/useTransition.ts","../src/components/SplitPane/helpers.tsx","../src/components/Resizer/index.tsx","../src/components/CollapseButton.tsx","../src/hooks/useEventListener.ts","../src/components/SplitPane/hooks/memos/useIsCollapseReversed.ts","../src/components/SplitPane/hooks/memos/useCollapseOptions.tsx","../src/components/SplitPane/index.tsx","../src/components/SplitPane/hooks/memos/useIsLtr.ts","../src/components/SplitPane/hooks/memos/useCollapsedSizes.ts","../src/components/SplitPane/hooks/useSplitPaneResize.ts","../src/components/SplitPane/hooks/memos/useMinSizes.ts","../src/components/SplitPane/hooks/memos/useCollapsedSize.ts","../src/components/SplitPane/hooks/memos/useChildPanes.ts","../src/components/SplitPane/hooks/callbacks/useGetMovedSizes.ts","../src/components/SplitPane/hooks/callbacks/useGetCurrentPaneSizes.ts","../src/components/SplitPane/hooks/callbacks/useHandleDragFinished.ts","../src/components/SplitPane/hooks/callbacks/useRecalculateSizes.ts","../src/components/SplitPane/hooks/effects/useDragState.ts","../src/components/SplitPane/hooks/callbacks/useCollapseSize.ts","../src/components/SplitPane/hooks/callbacks/useUncollapseSize.ts","../src/components/SplitPane/hooks/callbacks/useUpdateCollapsedSizes.ts","../src/components/SplitPane/hooks/callbacks/useHandleDragStart.ts","../src/components/SplitPane/hooks/callbacks/useToggleCollapse.ts","../src/components/SplitPane/hooks/callbacks/useGetIsCollapsed.ts"],"sourcesContent":["import { useMemo } from 'react';\r\n\r\nexport const useMergeClasses = (classes: (string | undefined)[]): string =>\r\n  useMemo(() => classes.filter(c => c).join(' '), [classes]);\r\n","import * as React from 'react';\r\nimport { useMergeClasses } from '../../hooks/useMergeClasses';\r\nimport { useEffect, useMemo, useRef, useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { SplitType } from '../SplitPane';\r\n\r\nconst DEFAULT_COLLAPSE_TRANSITION_TIMEOUT = 500;\r\nconst verticalCss = css`\r\n  width: 0;\r\n  height: 100%;\r\n`;\r\nconst horizontalCss = css`\r\n  width: 100%;\r\n  height: 0;\r\n`;\r\nconst coverCss = css`\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n`;\r\n\r\ninterface PaneRootProps {\r\n  $isVertical: boolean;\r\n  $shouldAnimate: boolean;\r\n  $timeout: number;\r\n}\r\nconst PaneRoot = styled.div<PaneRootProps>`\r\n  position: relative;\r\n  outline: none;\r\n  border: 0;\r\n  overflow: hidden;\r\n  display: flex;\r\n  flex-grow: 1;\r\n  flex-shrink: 1;\r\n  ${props => (props.$isVertical ? verticalCss : horizontalCss)}\r\n  ${props => props.$shouldAnimate && `transition: flex-basis ${props.$timeout}ms ease-in-out`}\r\n`;\r\nconst WidthPreserver = styled.div<{ $isCollapsed: boolean }>`\r\n  ${coverCss}\r\n  ${props =>\r\n    props.$isCollapsed &&\r\n    css`\r\n      * {\r\n        z-index: 0;\r\n      }\r\n      z-index: 0;\r\n    `}\r\n`;\r\n\r\nconst CollapseOverlay = styled.div<{ $timeout: number; $isCollapsed: boolean }>`\r\n  ${props => props.$isCollapsed && coverCss}\r\n  ${props =>\r\n    props.$isCollapsed &&\r\n    css`\r\n      z-index: 1;\r\n    `};\r\n  opacity: ${props => (props.$isCollapsed ? 1 : 0)};\r\n  transition: opacity ${props => props.$timeout}ms ease-in-out;\r\n`;\r\n\r\nexport interface PaneProps {\r\n  size: number;\r\n  minSize: number;\r\n  isVertical: boolean;\r\n  split: SplitType;\r\n  className?: string;\r\n  isCollapsed: boolean;\r\n  forwardRef: React.Ref<HTMLDivElement>;\r\n  collapseOverlayCss?: React.CSSProperties;\r\n  collapsedIndices: number[];\r\n  children: React.ReactNode;\r\n  transitionTimeout: number | undefined;\r\n}\r\nconst UnMemoizedPane = ({\r\n  size,\r\n  minSize,\r\n  isCollapsed,\r\n  collapseOverlayCss = { background: 'rgba(220,220,220, 0.1)' },\r\n  isVertical,\r\n  split,\r\n  className,\r\n  children,\r\n  forwardRef,\r\n  collapsedIndices,\r\n  transitionTimeout,\r\n}: PaneProps) => {\r\n  const classes = useMergeClasses(['Pane', split, className]);\r\n  const timeout = useMemo(() => transitionTimeout ?? DEFAULT_COLLAPSE_TRANSITION_TIMEOUT, [\r\n    transitionTimeout,\r\n  ]);\r\n  const [shouldAnimate, setShouldAnimate] = useState(false);\r\n\r\n  const didMount = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (didMount.current) {\r\n      if (timeout !== 0) {\r\n        setShouldAnimate(true);\r\n        setTimeout(() => setShouldAnimate(false), 500);\r\n      }\r\n    } else {\r\n      didMount.current = true;\r\n    }\r\n  }, [setShouldAnimate, collapsedIndices, timeout]);\r\n\r\n  const minStyle = useMemo(() => (isVertical ? { minWidth: minSize } : { minHeight: minSize }), [\r\n    minSize,\r\n    isVertical,\r\n  ]);\r\n  const widthPreserverStyle: React.CSSProperties = isCollapsed\r\n    ? { ...minStyle, userSelect: 'none' }\r\n    : minStyle;\r\n  return (\r\n    <PaneRoot\r\n      $isVertical={isVertical}\r\n      $shouldAnimate={timeout !== 0 && shouldAnimate}\r\n      $timeout={timeout}\r\n      className={classes}\r\n      ref={forwardRef}\r\n      style={{ flexBasis: size }}\r\n    >\r\n      <CollapseOverlay $isCollapsed={isCollapsed} $timeout={timeout} style={collapseOverlayCss} />\r\n      <WidthPreserver $isCollapsed={isCollapsed} style={widthPreserverStyle}>\r\n        {children}\r\n      </WidthPreserver>\r\n    </PaneRoot>\r\n  );\r\n};\r\n\r\nUnMemoizedPane.displayName = 'Pane';\r\nexport const Pane = React.memo(UnMemoizedPane);\r\n","import styled, { css } from 'styled-components';\r\n\r\ntype OrientationProps = {\r\n  $isVertical: boolean;\r\n};\r\nexport const topBottomCss = css`\r\n  top: 0;\r\n  bottom: 0;\r\n`;\r\nconst leftRightCss = css`\r\n  right: 0;\r\n  left: 0;\r\n`;\r\n\r\nexport const ButtonWrapper = styled.div<OrientationProps>`\r\n  cursor: pointer;\r\n  position: absolute;\r\n`;\r\n\r\ninterface ButtonContainerProps extends OrientationProps {\r\n  $grabberSize: string | null;\r\n  $isLtr: boolean;\r\n}\r\nexport const ButtonContainer = styled.div<ButtonContainerProps>`\r\n  z-index: 3;\r\n  position: absolute;\r\n  overflow: initial;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  ${props => `${props.$isVertical ? 'width' : 'height'}: ${props.$grabberSize}`};\r\n  ${props => (props.$isVertical ? topBottomCss : leftRightCss)}\r\n`;\r\n\r\ninterface GrabberProps extends OrientationProps {\r\n  $isCollapsed: boolean;\r\n  $isLtr: boolean;\r\n}\r\nexport const ResizeGrabber = styled.div<GrabberProps>`\r\n  position: absolute;\r\n  z-index: 3;\r\n  transform: ${props =>\r\n    props.$isVertical ? `translateX(${props.$isLtr ? '-' : ''}50%)` : 'translateY(-50%)'};\r\n  cursor: ${props => !props.$isCollapsed && (props.$isVertical ? 'col-resize' : 'row-resize')};\r\n  ${props => (props.$isVertical ? topBottomCss : leftRightCss)}\r\n`;\r\n\r\nexport const ResizePresentation = styled.div<OrientationProps>`\r\n  z-index: 2;\r\n  position: absolute;\r\n  ${props => (props.$isVertical ? topBottomCss : leftRightCss)}\r\n`;\r\n\r\nexport const getSizeWithUnit = (size: string | number): string =>\r\n  isNaN(size as number) ? size.toString() : `${size}px`;\r\n","import { CollapseOptions, TransitionType } from '../../SplitPane';\nimport { useMemo } from 'react';\nimport { Fade, Grow, Zoom } from '@material-ui/core';\ntype TransitionComponent = typeof Fade | typeof Grow | typeof Zoom;\nconst transitionComponentMap: {\n  [key in TransitionType]: TransitionComponent;\n} = {\n  fade: Fade,\n  grow: Grow,\n  zoom: Zoom,\n  none: Fade,\n};\n\nexport const useTransition = (collapseOptions?: CollapseOptions) =>\n  useMemo(() => transitionComponentMap[collapseOptions?.buttonTransition ?? 'fade'], [\n    collapseOptions,\n  ]);\n","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { SplitType } from '.';\r\nimport { Nullable } from '../../types/utilities';\r\n\r\nexport const DEFAULT_MIN_SIZE = 50;\r\n\r\nexport const getMinSize = (index: number, minSizes?: number | number[]): number => {\r\n  if (typeof minSizes === 'number') {\r\n    if (minSizes > 0) {\r\n      return minSizes;\r\n    }\r\n  } else if (minSizes instanceof Array) {\r\n    const value = minSizes[index];\r\n    if (value > 0) {\r\n      return value;\r\n    }\r\n  }\r\n  return DEFAULT_MIN_SIZE;\r\n};\r\n\r\nexport const getRefSize = ({\r\n  ref,\r\n  split,\r\n}: {\r\n  split: SplitType;\r\n  ref: React.RefObject<HTMLDivElement>;\r\n}) => {\r\n  const sizeAttr = split === 'vertical' ? 'width' : 'height';\r\n  return ref.current?.getBoundingClientRect()[sizeAttr] ?? 0;\r\n};\r\n\r\nexport type MoveDetails = {\r\n  sizes: number[];\r\n  index: number;\r\n  offset: number;\r\n  minSizes: number[];\r\n  collapsedIndices: number[];\r\n  collapsedSize: number;\r\n};\r\n/**\r\n * Mutates the original array in a recursive fashion, identifying the current sizes, whether they need to be changed, and whether they need to push the next or previous pane.\r\n */\r\nexport const moveSizes = ({\r\n  index,\r\n  minSizes,\r\n  offset,\r\n  sizes,\r\n  collapsedIndices,\r\n  collapsedSize,\r\n}: MoveDetails): number => {\r\n  //recursion break points\r\n  if (!offset || index < 0 || index + 1 >= sizes.length) {\r\n    return 0;\r\n  }\r\n  const isCollapsed = (idx: number) => collapsedIndices.includes(idx);\r\n  const firstMinSize = isCollapsed(index) ? collapsedSize : getMinSize(index, minSizes);\r\n  const secondMinSize = isCollapsed(index + 1) ? collapsedSize : getMinSize(index + 1, minSizes);\r\n  const firstSize = sizes[index] + offset;\r\n  const secondSize = sizes[index + 1] - offset;\r\n\r\n  if (offset < 0 && firstSize < firstMinSize) {\r\n    const missing = firstSize - firstMinSize;\r\n    const pushedOffset = moveSizes({\r\n      sizes,\r\n      index: index - 1,\r\n      offset: missing,\r\n      minSizes,\r\n      collapsedIndices,\r\n      collapsedSize,\r\n    });\r\n\r\n    offset -= missing - pushedOffset;\r\n  } else if (offset > 0 && secondSize < secondMinSize) {\r\n    const missing = secondMinSize - secondSize;\r\n    const pushedOffset = moveSizes({\r\n      sizes,\r\n      index: index + 1,\r\n      offset: missing,\r\n      minSizes,\r\n      collapsedIndices,\r\n      collapsedSize,\r\n    });\r\n\r\n    offset -= missing - pushedOffset;\r\n  }\r\n  sizes[index] += offset;\r\n  sizes[index + 1] -= offset;\r\n\r\n  return offset;\r\n};\r\n\r\ninterface MoveCollapsedDetails {\r\n  offset: number;\r\n  isReversed: boolean;\r\n  index: number;\r\n  sizes: number[];\r\n  collapsedIndices: number[];\r\n  minSizes: number[];\r\n  collapsedSize: number;\r\n}\r\n/**\r\n * This is only used when a collapse action is invoked.  It's meant to move any collapsed siblings along with the move.\r\n */\r\nexport const moveCollapsedSiblings = ({\r\n  offset,\r\n  isReversed,\r\n  collapsedIndices,\r\n  minSizes,\r\n  sizes,\r\n  index,\r\n  collapsedSize,\r\n}: MoveCollapsedDetails) => {\r\n  if (isReversed ? offset > 0 : offset < 0) {\r\n    for (\r\n      let i = isReversed ? index : index + 1;\r\n      isReversed ? i > 0 : i < sizes.length - 1;\r\n      isReversed ? i-- : i++\r\n    ) {\r\n      if (collapsedIndices.includes(i)) {\r\n        moveSizes({\r\n          sizes,\r\n          index: isReversed ? i - 1 : i,\r\n          offset,\r\n          minSizes,\r\n          collapsedIndices,\r\n          collapsedSize,\r\n        });\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\nconst verticalCss = css`\r\n  left: 0;\r\n  right: 0;\r\n  flex-direction: row;\r\n`;\r\nconst horizontalCss = css`\r\n  bottom: 0;\r\n  top: 0;\r\n  flex-direction: column;\r\n  min-height: 100%;\r\n  width: 100%;\r\n`;\r\nexport const Wrapper = styled.div<{ split: SplitType }>`\r\n  display: flex;\r\n  flex: 1;\r\n  height: 100%;\r\n  position: absolute;\r\n  outline: none;\r\n  overflow: hidden;\r\n  ${props => (props.split === 'vertical' ? verticalCss : horizontalCss)}\r\n`;\r\n\r\n/**\r\n * Infers the indices of the collapsed panels from an array of nullable collapse sizes.  If the index is null then it's not collapsed.\r\n */\r\nexport const convertCollapseSizesToIndices = (sizes?: Nullable<number>[]) =>\r\n  sizes?.reduce((prev, cur, idx) => (cur !== null ? [...prev, idx] : [...prev]), [] as number[]) ??\r\n  [];\r\n\r\nexport const addArray = (arr: number[]) => arr.reduce((prev, cur) => prev + cur, 0);\r\n\r\n/**\r\n * Returns a debounced version of a function. Similar to lodash's _.debounce\r\n * @param func the function to be debounced\r\n * @param waitFor the amount of time that must elapse before the debounce expires and the callback is called.\r\n */\r\nexport const debounce = <F extends (...args: any[]) => any>(func: F, waitFor: number) => {\r\n  let timeout: ReturnType<typeof setTimeout> | null = null;\r\n\r\n  const debounced = (...args: Parameters<F>) => {\r\n    if (timeout !== null) {\r\n      clearTimeout(timeout);\r\n      timeout = null;\r\n    }\r\n    timeout = setTimeout(() => func(...args), waitFor);\r\n  };\r\n\r\n  return debounced as (...args: Parameters<F>) => ReturnType<F>;\r\n};\r\n","import React, { useCallback, useMemo, useState } from 'react';\r\nimport { Fade } from '@material-ui/core';\r\nimport { BeginDragCallback } from '../SplitPane/hooks/effects/useDragState';\r\nimport {\r\n  ButtonContainer,\r\n  ButtonWrapper,\r\n  getSizeWithUnit,\r\n  ResizeGrabber,\r\n  ResizePresentation,\r\n} from './helpers';\r\nimport { useMergeClasses } from '../../hooks/useMergeClasses';\r\nimport { CollapseOptions, ResizerOptions } from '../SplitPane';\r\nimport { useTransition } from './hooks/useTransition';\r\nimport { SplitType } from '../SplitPane';\r\nimport { debounce } from '../SplitPane/helpers';\r\n\r\nconst defaultResizerOptions: Required<ResizerOptions> = {\r\n  grabberSize: '1rem',\r\n  css: { backgroundColor: 'rgba(120, 120, 120, 0.3)' },\r\n  hoverCss: { backgroundColor: 'rgba(120, 120, 120, 0.6)' },\r\n};\r\n\r\nexport interface ResizerProps {\r\n  isVertical: boolean;\r\n  isLtr: boolean;\r\n  split: SplitType;\r\n  className?: string;\r\n  paneIndex: number;\r\n  collapseOptions?: CollapseOptions;\r\n  resizerOptions?: Partial<ResizerOptions>;\r\n  onDragStarted: BeginDragCallback;\r\n  onCollapseToggle: (paneIndex: number) => void;\r\n  isCollapsed: boolean;\r\n}\r\nexport const Resizer = ({\r\n  isVertical,\r\n  split,\r\n  className,\r\n  paneIndex,\r\n  onDragStarted,\r\n  resizerOptions,\r\n  collapseOptions,\r\n  onCollapseToggle,\r\n  isLtr,\r\n  isCollapsed,\r\n}: ResizerProps) => {\r\n  const { grabberSize, css, hoverCss } = { ...defaultResizerOptions, ...resizerOptions };\r\n\r\n  const classes = useMergeClasses(['Resizer', split, className]);\r\n  const grabberSizeWithUnit = useMemo(() => getSizeWithUnit(grabberSize), [grabberSize]);\r\n  const Transition = useTransition(collapseOptions);\r\n\r\n  const [isHovered, setIsHovered] = useState(false);\r\n\r\n  const handleMouseDown = useCallback(\r\n    (event: React.MouseEvent) => {\r\n      event.preventDefault();\r\n      if (!isCollapsed) {\r\n        onDragStarted({ index: paneIndex, position: event });\r\n      }\r\n    },\r\n    [paneIndex, isCollapsed, onDragStarted]\r\n  );\r\n  const handleTouchStart = useCallback(\r\n    (event: React.TouchEvent) => {\r\n      event.preventDefault();\r\n      if (!isCollapsed) {\r\n        onDragStarted({ index: paneIndex, position: event.touches[0] });\r\n      }\r\n    },\r\n    [paneIndex, isCollapsed, onDragStarted]\r\n  );\r\n  const handleButtonClick = useCallback(\r\n    (event: React.MouseEvent) => {\r\n      event.stopPropagation();\r\n      onCollapseToggle(paneIndex);\r\n    },\r\n    [paneIndex, onCollapseToggle]\r\n  );\r\n  const handleButtonMousedown = useCallback((event: React.MouseEvent) => {\r\n    event.stopPropagation();\r\n  }, []);\r\n\r\n  const debouncedSetHovered = useCallback(\r\n    debounce(() => setIsHovered(true), 50),\r\n    [setIsHovered]\r\n  );\r\n  const handleMouseEnterGrabber = useCallback(() => {\r\n    debouncedSetHovered();\r\n  }, [debouncedSetHovered]);\r\n\r\n  const debouncedSetNotHovered = useCallback(\r\n    debounce(() => setIsHovered(false), 100),\r\n    [setIsHovered]\r\n  );\r\n  const handleMouseLeaveGrabber = useCallback(() => debouncedSetNotHovered(), [\r\n    debouncedSetNotHovered,\r\n  ]);\r\n\r\n  const getWidthOrHeight = useCallback(\r\n    (size: string | number) => (isVertical ? { width: size } : { height: size }),\r\n    [isVertical]\r\n  );\r\n  const preButtonFlex = useMemo(\r\n    () => Math.max(100 - (collapseOptions?.buttonPositionOffset ?? 0), 0),\r\n    [collapseOptions]\r\n  );\r\n  const postButtonFlex = useMemo(\r\n    () => Math.max(100 + (collapseOptions?.buttonPositionOffset ?? 0), 0),\r\n    [collapseOptions]\r\n  );\r\n  const isTransition = collapseOptions?.buttonTransition !== 'none';\r\n  const collapseButton = collapseOptions ? (\r\n    <ButtonContainer $isVertical={isVertical} $grabberSize={grabberSizeWithUnit} $isLtr={isLtr}>\r\n      <div style={{ flex: `1 1 ${preButtonFlex}` }} />\r\n      <Transition\r\n        in={isTransition ? isHovered : true}\r\n        timeout={isTransition ? collapseOptions.buttonTransitionTimeout : 0}\r\n        style={{ flex: '0 0 0', position: 'relative' }}\r\n      >\r\n        <ButtonWrapper\r\n          $isVertical={isVertical}\r\n          onClick={handleButtonClick}\r\n          onMouseDown={handleButtonMousedown}\r\n        >\r\n          {isCollapsed ? collapseOptions.afterToggleButton : collapseOptions.beforeToggleButton}\r\n        </ButtonWrapper>\r\n      </Transition>\r\n      <div style={{ flex: `1 1 ${postButtonFlex}` }} />\r\n    </ButtonContainer>\r\n  ) : null;\r\n\r\n  return (\r\n    <div key=\"grabber.root\" style={{ position: 'relative' }}>\r\n      <ResizeGrabber\r\n        key=\"grabber\"\r\n        $isVertical={isVertical}\r\n        $isCollapsed={isCollapsed}\r\n        $isLtr={isLtr}\r\n        style={getWidthOrHeight(grabberSize)}\r\n        role=\"presentation\"\r\n        className={classes}\r\n        onMouseDown={handleMouseDown}\r\n        onTouchStart={handleTouchStart}\r\n        onMouseEnter={handleMouseEnterGrabber}\r\n        onMouseLeave={handleMouseLeaveGrabber}\r\n      >\r\n        {collapseButton}\r\n      </ResizeGrabber>\r\n      <Fade key=\"resize.presentation.fadein\" in={!isHovered}>\r\n        <ResizePresentation $isVertical={isVertical} style={{ ...getWidthOrHeight(1), ...css }} />\r\n      </Fade>\r\n      <Fade key=\"resize.presentation.fadeout\" in={isHovered}>\r\n        <ResizePresentation\r\n          $isVertical={isVertical}\r\n          style={{ ...getWidthOrHeight(1), ...hoverCss }}\r\n        />\r\n      </Fade>\r\n    </div>\r\n  );\r\n};\r\nResizer.displayName = 'Resizer';\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Button = styled.div`\r\n  width: 1.8rem;\r\n  height: 1.8rem;\r\n  border-radius: 300px;\r\n  background: #0092d1;\r\n  cursor: pointer;\r\n  user-select: none;\r\n  text-align: center;\r\n  color: white;\r\n  border: 2px rgba(200, 200, 200, 0.5) solid;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  svg {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n`;\r\n\r\nenum Direction {\r\n  left,\r\n  right,\r\n  up,\r\n  down,\r\n}\r\n\r\nconst paths: { [key in Direction]: string } = {\r\n  [Direction.left]: 'M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z',\r\n  [Direction.right]: 'M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z',\r\n  [Direction.up]: 'M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z',\r\n  [Direction.down]: 'M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z',\r\n};\r\n\r\ninterface IconProps extends React.SVGProps<SVGSVGElement> {\r\n  dir: Direction;\r\n}\r\n\r\nconst Icon: React.FC<IconProps> = props => (\r\n  <svg {...props} focusable=\"false\" fill=\"white\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\r\n    <path d={paths[props.dir]} />\r\n  </svg>\r\n);\r\n\r\ninterface CollapseButtonProps {\r\n  isLtr: boolean;\r\n  isVertical: boolean;\r\n  isBefore: boolean;\r\n  isReversed: boolean;\r\n}\r\nexport const CollapseButton: React.FC<CollapseButtonProps> = props => {\r\n  const dirs: Direction[] = props.isVertical\r\n    ? [Direction.left, Direction.right]\r\n    : [Direction.up, Direction.down];\r\n  const [a, b] = props.isReversed ? dirs.reverse() : dirs;\r\n  const dir: Direction = props.isBefore ? (props.isLtr ? a : b) : props.isLtr ? b : a;\r\n  return (\r\n    <Button>\r\n      <Icon dir={dir} />\r\n    </Button>\r\n  );\r\n};\r\n","import { useEffect } from 'react';\n\nexport const useEventListener = <K extends keyof WindowEventMap>(\n  type: K,\n  listener?: (this: Window, ev: WindowEventMap[K]) => void\n): void =>\n  useEffect(() => {\n    const abortController = new AbortController();\n    if (!listener) return;\n    window.addEventListener(type, listener);\n    return (): void => {\n      window.removeEventListener(type, listener);\n      abortController.abort();\n    };\n  }, [type, listener]);\n","import { useMemo } from 'react';\r\nimport { CollapseOptions } from '../../index';\r\n\r\nexport const isCollapseDirectionReversed = (\r\n  collapseOptions?: Partial<CollapseOptions> | boolean\r\n): boolean => {\r\n  if (typeof collapseOptions === 'boolean') return false;\r\n  return collapseOptions?.collapseDirection\r\n    ? ['right', 'down'].includes(collapseOptions.collapseDirection)\r\n    : false;\r\n};\r\n\r\nexport const useIsCollapseReversed = (collapseOptions?: Partial<CollapseOptions> | boolean) =>\r\n  useMemo(() => isCollapseDirectionReversed(collapseOptions), [collapseOptions]);\r\n","import React from 'react';\r\nimport { CollapseOptions } from '../../index';\r\nimport { CollapseButton } from '../../../CollapseButton';\r\n\r\nconst getDefault = (props: {\r\n  isVertical: boolean;\r\n  isLtr: boolean;\r\n  isReversed: boolean;\r\n}): CollapseOptions => ({\r\n  beforeToggleButton: <CollapseButton {...props} isBefore={true} />,\r\n  afterToggleButton: <CollapseButton {...props} isBefore={false} />,\r\n  collapseDirection: props.isVertical ? 'left' : 'up',\r\n  overlayCss: { backgroundColor: 'rgba(0, 0, 0, 0.4)' },\r\n  buttonTransitionTimeout: 200,\r\n  buttonTransition: 'grow',\r\n  collapsedSize: 50,\r\n  collapseTransitionTimeout: 500,\r\n  buttonPositionOffset: 0,\r\n});\r\n\r\n/**\r\n * function that returns a set of valid collapseOptions from uncertain input.\r\n */\r\nexport const useCollapseOptions = ({\r\n  originalValue,\r\n  ...orientationDetails\r\n}: {\r\n  originalValue: Partial<CollapseOptions> | undefined | boolean;\r\n  isVertical: boolean;\r\n  isLtr: boolean;\r\n  isReversed: boolean;\r\n}): Required<CollapseOptions> | undefined => {\r\n  if (originalValue === undefined || originalValue === false) return undefined;\r\n  if (originalValue === true) return getDefault(orientationDetails);\r\n  return { ...getDefault(orientationDetails), ...originalValue };\r\n};\r\n","import React, { useState } from 'react';\r\nimport { Pane } from '../Pane';\r\nimport { Resizer } from '../Resizer';\r\nimport { useSplitPaneResize } from './hooks/useSplitPaneResize';\r\nimport { convertCollapseSizesToIndices, getMinSize, Wrapper } from './helpers';\r\nimport { useMergeClasses } from '../../hooks/useMergeClasses';\r\nimport { useIsCollapseReversed } from './hooks/memos/useIsCollapseReversed';\r\nimport { useToggleCollapse } from './hooks/callbacks/useToggleCollapse';\r\nimport { useGetIsPaneCollapsed } from './hooks/callbacks/useGetIsCollapsed';\r\nimport { useIsLtr } from './hooks/memos/useIsLtr';\r\nimport { useCollapsedSizes } from './hooks/memos/useCollapsedSizes';\r\nimport { Nullable } from '../../types/utilities';\r\nimport { useCollapseOptions } from './hooks/memos/useCollapseOptions';\r\n\r\n// String Unions\r\nexport type SplitType = 'horizontal' | 'vertical';\r\nexport type Direction = 'ltr' | 'rtl';\r\nexport type TransitionType = 'fade' | 'grow' | 'zoom' | 'none';\r\nexport type CollapseDirection = 'left' | 'right' | 'up' | 'down';\r\n\r\nexport type SplitPaneHooks = {\r\n  onDragStarted?: () => void;\r\n  onChange?: (sizes: number[]) => void;\r\n  onSaveSizes?: (sizes: number[]) => void;\r\n  onCollapse?: (collapsedSizes: Nullable<number>[]) => void;\r\n};\r\nexport interface CollapseOptions {\r\n  beforeToggleButton: React.ReactElement;\r\n  afterToggleButton: React.ReactElement;\r\n  buttonTransition: TransitionType;\r\n  buttonTransitionTimeout: number;\r\n  buttonPositionOffset: number;\r\n  collapseDirection: CollapseDirection;\r\n  collapseTransitionTimeout: number;\r\n  collapsedSize: number;\r\n  overlayCss: React.CSSProperties;\r\n}\r\nexport interface ResizerOptions {\r\n  css?: React.CSSProperties;\r\n  hoverCss?: React.CSSProperties;\r\n  grabberSize?: number | string;\r\n}\r\n\r\nexport interface SplitPaneProps {\r\n  split: SplitType;\r\n  collapse?: boolean | Partial<CollapseOptions>;\r\n\r\n  dir?: Direction;\r\n  className?: string;\r\n\r\n  initialSizes?: number[];\r\n  minSizes?: number | number[];\r\n  collapsedSizes?: Nullable<number>[];\r\n\r\n  hooks?: SplitPaneHooks;\r\n  resizerOptions?: ResizerOptions;\r\n\r\n  children: React.ReactChild[];\r\n}\r\n\r\nexport const SplitPane: React.FC<SplitPaneProps> = props => {\r\n  const collapsedSizes = useCollapsedSizes(props);\r\n  const isLtr = useIsLtr(props);\r\n  const isVertical = props.split === 'vertical';\r\n  const isReversed = useIsCollapseReversed(props.collapse);\r\n\r\n  const collapseOptions = useCollapseOptions({\r\n    isVertical,\r\n    isLtr,\r\n    originalValue: props.collapse,\r\n    isReversed,\r\n  });\r\n\r\n  const [collapsedIndices, setCollapsed] = useState<number[]>(\r\n    convertCollapseSizesToIndices(collapsedSizes)\r\n  );\r\n\r\n  const { childPanes, handleDragStart, resizingIndex } = useSplitPaneResize({\r\n    ...props,\r\n    isLtr,\r\n    isVertical,\r\n    collapsedIndices,\r\n    collapsedSizes,\r\n    collapseOptions,\r\n  });\r\n\r\n  const splitPaneClass = useMergeClasses(['SplitPane', props.split, props.className]);\r\n  const resizingClass = useMergeClasses(['Resizing', props.className]);\r\n\r\n  const toggleCollapse = useToggleCollapse({ setCollapsed, collapsedIndices });\r\n  const getIsPaneCollapsed = useGetIsPaneCollapsed({ collapsedIndices });\r\n\r\n  if (childPanes.length <= 1) {\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      console.error(\r\n        '[react-collapse-pane] - You must have more than one non-null child inside the SplitPane component.  Even though SplitPane does not crash, you should resolve this error.'\r\n      );\r\n    }\r\n    return <>{props.children}</>;\r\n  }\r\n\r\n  // stacks the children and places a resizer in between each of them. Each resizer has the same index as the pane that it controls.\r\n  const entries = childPanes.map((pane, paneIndex) => {\r\n    const resizerPaneIndex = isReversed ? paneIndex : paneIndex - 1;\r\n    return (\r\n      <React.Fragment key={paneIndex}>\r\n        {paneIndex - 1 >= 0 ? (\r\n          <Resizer\r\n            key={`resizer.${resizerPaneIndex}`}\r\n            isCollapsed={getIsPaneCollapsed(resizerPaneIndex)}\r\n            isVertical={isVertical}\r\n            isLtr={isLtr}\r\n            split={props.split}\r\n            className={resizingIndex === resizerPaneIndex ? resizingClass : props.className}\r\n            paneIndex={resizerPaneIndex}\r\n            resizerOptions={props.resizerOptions}\r\n            collapseOptions={collapseOptions}\r\n            onDragStarted={handleDragStart}\r\n            onCollapseToggle={toggleCollapse}\r\n          />\r\n        ) : null}\r\n        <Pane\r\n          key={`pane.${paneIndex}`}\r\n          forwardRef={pane.ref}\r\n          size={pane.size}\r\n          isCollapsed={getIsPaneCollapsed(paneIndex)}\r\n          collapsedIndices={collapsedIndices}\r\n          split={props.split}\r\n          isVertical={isVertical}\r\n          minSize={getMinSize(paneIndex, props.minSizes)}\r\n          className={props.className}\r\n          transitionTimeout={collapseOptions?.collapseTransitionTimeout}\r\n          collapseOverlayCss={collapseOptions?.overlayCss}\r\n        >\r\n          {pane.node}\r\n        </Pane>\r\n      </React.Fragment>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <Wrapper key=\"splitpanewrapper\" className={splitPaneClass} split={props.split}>\r\n      {entries}\r\n    </Wrapper>\r\n  );\r\n};\r\nSplitPane.displayName = 'SplitPane';\r\n","import { useMemo } from 'react';\r\nimport { Direction, SplitType } from '../../index';\r\n\r\nexport const useIsLtr = ({ split, dir }: { dir?: Direction; split: SplitType }) =>\r\n  useMemo(() => (split === 'vertical' ? dir !== 'rtl' : true), [split, dir]);\r\n","import { useMemo } from 'react';\r\nimport { SplitPaneProps } from '../../index';\r\n\r\nexport const useCollapsedSizes = ({\r\n  collapsedSizes,\r\n  children,\r\n  collapse,\r\n}: Pick<SplitPaneProps, 'collapsedSizes' | 'children' | 'collapse'>) =>\r\n  useMemo(\r\n    () =>\r\n      collapsedSizes?.length === children.length && !!collapse\r\n        ? collapsedSizes\r\n        : new Array(children.length).fill(null),\r\n    [children.length, collapse, collapsedSizes]\r\n  );\r\n","import * as React from 'react';\r\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react';\r\nimport { SplitPaneProps, CollapseOptions } from '..';\r\nimport { useDragState, BeginDragCallback } from './effects/useDragState';\r\nimport { useMinSizes } from './memos/useMinSizes';\r\nimport { useGetMovedSizes } from './callbacks/useGetMovedSizes';\r\nimport { useIsCollapseReversed } from './memos/useIsCollapseReversed';\r\nimport { useHandleDragFinished } from './callbacks/useHandleDragFinished';\r\nimport { useHandleDragStart } from './callbacks/useHandleDragStart';\r\nimport { useChildPanes } from './memos/useChildPanes';\r\nimport { useGetCurrentPaneSizes } from './callbacks/useGetCurrentPaneSizes';\r\nimport { useCollapseSize } from './callbacks/useCollapseSize';\r\nimport { useUncollapseSize } from './callbacks/useUncollapseSize';\r\nimport { useUpdateCollapsedSizes } from './callbacks/useUpdateCollapsedSizes';\r\nimport { useCollapsedSize } from './memos/useCollapsedSize';\r\nimport { debounce } from '../helpers';\r\nimport { useRecalculateSizes } from './callbacks/useRecalculateSizes';\r\nimport { useEventListener } from '../../../hooks/useEventListener';\r\nimport { Nullable } from '../../../types/utilities';\r\n\r\nexport interface ChildPane {\r\n  node: React.ReactChild;\r\n  ref: React.RefObject<HTMLDivElement>;\r\n  key: string;\r\n  size: number;\r\n}\r\ninterface SplitPaneResizeReturns {\r\n  childPanes: ChildPane[];\r\n  resizingIndex: Nullable<number>;\r\n  handleDragStart: BeginDragCallback;\r\n}\r\n\r\ninterface SplitPaneResizeOptions\r\n  extends Pick<SplitPaneProps, 'split' | 'initialSizes' | 'hooks' | 'collapsedSizes' | 'minSizes'> {\r\n  collapsedIndices: number[];\r\n  isLtr: boolean;\r\n  collapseOptions?: CollapseOptions;\r\n  children: React.ReactChild[];\r\n  isVertical: boolean;\r\n}\r\n\r\n/**\r\n * Manages the dragging, size calculation, collapse calculation, and general state management of the panes.  It propogates the results of its complex calculations into the `childPanes` which are used by the rest of the \"dumb\" react components that just take all of them and render them\r\n */\r\nexport const useSplitPaneResize = (options: SplitPaneResizeOptions): SplitPaneResizeReturns => {\r\n  const {\r\n    children: originalChildren,\r\n    split,\r\n    initialSizes: originalDefaults,\r\n    minSizes: originalMinSizes,\r\n    hooks,\r\n    collapsedIndices,\r\n    collapsedSizes: originalCollapsedSizes,\r\n    collapseOptions,\r\n    isVertical,\r\n    isLtr,\r\n  } = options;\r\n\r\n  const children = !Array.isArray(originalChildren) ? [originalChildren] : originalChildren;\r\n  // VALUES: const values used throughout the different logic\r\n  const paneRefs = useRef(new Map<string, React.RefObject<HTMLDivElement>>());\r\n\r\n  const minSizes = useMinSizes({\r\n    minSizes: originalMinSizes,\r\n    numSizes: children.length,\r\n    collapseOptions,\r\n    collapsedIndices,\r\n  });\r\n  const collapsedSize = useCollapsedSize({ collapseOptions });\r\n  const childPanes = useChildPanes({ minSizes, children, paneRefs });\r\n  const isReversed = useIsCollapseReversed(collapseOptions);\r\n  const initialSizes = useMemo(() => children.map((_c, idx) => originalDefaults?.[idx] ?? 1), [\r\n    children,\r\n    originalDefaults,\r\n  ]);\r\n\r\n  // STATE: a map keeping track of all of the pane sizes\r\n  const [sizes, setSizes] = useState<number[]>(initialSizes);\r\n  const [movedSizes, setMovedSizes] = useState<number[]>(sizes);\r\n  const [collapsedSizes, setCollapsedSizes] = useState<Nullable<number>[]>(\r\n    originalCollapsedSizes ?? new Array(children.length).fill(null)\r\n  );\r\n  // CALLBACKS  callback functions used throughout. all functions are memoized by useCallback\r\n  const getMovedSizes = useGetMovedSizes({\r\n    minSizes,\r\n    sizes,\r\n    isLtr,\r\n    collapsedSize,\r\n    collapsedIndices,\r\n    isReversed,\r\n  });\r\n  const getCurrentPaneSizes = useGetCurrentPaneSizes({ childPanes, split });\r\n  const handleDragFinished = useHandleDragFinished({ movedSizes, children, hooks, setSizes });\r\n  const recalculateSizes = useRecalculateSizes({\r\n    setMovedSizes,\r\n    minSizes,\r\n    collapsedIndices,\r\n    collapsedSize,\r\n    getCurrentPaneSizes,\r\n    setSizes,\r\n    originalMinSizes,\r\n  });\r\n\r\n  // STATE: if dragging, contains which pane is dragging and what the offset is.  If not dragging then null\r\n  const { dragState, beginDrag } = useDragState(isVertical, handleDragFinished);\r\n\r\n  const collapseSize = useCollapseSize({\r\n    setMovedSizes,\r\n    setSizes,\r\n    minSizes,\r\n    movedSizes,\r\n    isReversed,\r\n    collapsedIndices,\r\n    collapsedSize,\r\n  });\r\n  const unCollapseSize = useUncollapseSize({\r\n    isReversed,\r\n    movedSizes,\r\n    minSizes,\r\n    setMovedSizes,\r\n    setSizes,\r\n    collapsedSize,\r\n    collapsedIndices,\r\n  });\r\n  const updateCollapsedSizes = useUpdateCollapsedSizes({\r\n    sizes,\r\n    collapsedSizes,\r\n    setCollapsedSizes,\r\n    movedSizes,\r\n    collapseSize,\r\n    unCollapseSize,\r\n    hooks,\r\n  });\r\n\r\n  // EFFECTS: manage updates and calculations based on dependency changes for states that are interacted with by multiple functions\r\n  useEffect(() => {\r\n    if (dragState !== null) setMovedSizes(getMovedSizes(dragState));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [dragState]);\r\n  useEffect(() => {\r\n    if (dragState !== null) hooks?.onChange?.(movedSizes);\r\n  }, [dragState, movedSizes, hooks]);\r\n  useEffect(() => {\r\n    hooks?.onCollapse?.(collapsedSizes);\r\n  }, [collapsedSizes, hooks]);\r\n  useEffect(() => {\r\n    updateCollapsedSizes(collapsedIndices);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [collapsedIndices]);\r\n  // recalculate initial sizes on window size change to maintain min sizes\r\n\r\n  const resetSizes = useCallback(\r\n    debounce(() => recalculateSizes(), 100),\r\n    [recalculateSizes]\r\n  );\r\n  useEventListener('resize', resetSizes);\r\n  useEffect(\r\n    () => recalculateSizes(initialSizes),\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    []\r\n  );\r\n  //populates the sizes of all the initially populated childPanes, adjust sizes based on collapsed state\r\n  const childPanesWithSizes: ChildPane[] = useMemo(\r\n    () =>\r\n      childPanes.map((child, index) => {\r\n        return { ...child, size: movedSizes[index] };\r\n      }),\r\n    [childPanes, movedSizes]\r\n  );\r\n\r\n  const handleDragStart = useHandleDragStart({ isReversed, hooks, beginDrag });\r\n  return {\r\n    childPanes: childPanesWithSizes,\r\n    resizingIndex: dragState?.index ?? null,\r\n    handleDragStart,\r\n  };\r\n};\r\n","import { useMemo } from 'react';\r\nimport { DEFAULT_MIN_SIZE, getMinSize } from '../../helpers';\r\nimport { CollapseOptions } from '../../index';\r\n\r\n/**\r\n * Returns the current actual minimum size of the panel.  This in some cases means the collapsed size.\r\n */\r\nexport const useMinSizes = ({\r\n  minSizes,\r\n  numSizes,\r\n  collapsedIndices,\r\n  collapseOptions,\r\n}: {\r\n  numSizes: number;\r\n  minSizes?: number | number[];\r\n  collapsedIndices: number[];\r\n  collapseOptions?: CollapseOptions;\r\n}): number[] =>\r\n  useMemo(\r\n    () =>\r\n      Array.from({ length: numSizes }).map((_child, idx) =>\r\n        collapsedIndices.includes(idx)\r\n          ? collapseOptions?.collapsedSize ?? DEFAULT_MIN_SIZE\r\n          : getMinSize(idx, minSizes)\r\n      ),\r\n    [numSizes, collapseOptions, collapsedIndices, minSizes]\r\n  );\r\n","import { useMemo } from 'react';\nimport { CollapseOptions } from '../../index';\nexport const DEFAULT_COLLAPSE_SIZE = 50;\n\nexport const useCollapsedSize = ({ collapseOptions }: { collapseOptions?: CollapseOptions }) =>\n  useMemo(() => collapseOptions?.collapsedSize ?? DEFAULT_COLLAPSE_SIZE, [collapseOptions]);\n","import { useMemo } from 'react';\r\nimport * as React from 'react';\r\nimport { ChildPane } from '../useSplitPaneResize';\r\n\r\n// converts all children nodes into 'childPane' objects that has its ref, key, but not the size yet\r\nexport const useChildPanes = ({\r\n  paneRefs,\r\n  children,\r\n  minSizes,\r\n}: {\r\n  paneRefs: React.MutableRefObject<Map<string, React.RefObject<HTMLDivElement>>>;\r\n  children: React.ReactChild[];\r\n  minSizes: number[];\r\n}) => {\r\n  const childPanes: Omit<ChildPane, 'size'>[] = useMemo(() => {\r\n    const prevPaneRefs = paneRefs.current;\r\n    paneRefs.current = new Map<string, React.RefObject<HTMLDivElement>>();\r\n    return children.map((node, index) => {\r\n      const key = `index.${index}`;\r\n      const ref = prevPaneRefs.get(key) || React.createRef();\r\n      paneRefs.current.set(key, ref);\r\n      return { key, node, ref, minSize: minSizes[index] };\r\n    });\r\n  }, [children, minSizes, paneRefs]);\r\n  return childPanes;\r\n};\r\n","import { useCallback } from 'react';\r\nimport { DragState } from '../effects/useDragState';\r\nimport { moveCollapsedSiblings, moveSizes } from '../../helpers';\r\n\r\nexport const useGetMovedSizes = ({\r\n  sizes: originalSizes,\r\n  isLtr,\r\n  minSizes,\r\n  collapsedIndices,\r\n  isReversed,\r\n  collapsedSize,\r\n}: {\r\n  sizes: number[];\r\n  isLtr: boolean;\r\n  minSizes: number[];\r\n  collapsedIndices: number[];\r\n  isReversed: boolean;\r\n  collapsedSize: number;\r\n}) =>\r\n  useCallback(\r\n    (dragState: DragState): number[] => {\r\n      const sizes = [...originalSizes];\r\n      const index = dragState.index;\r\n      const offset = isLtr ? dragState.offset : -dragState.offset;\r\n      moveSizes({\r\n        sizes,\r\n        index,\r\n        offset,\r\n        minSizes,\r\n        collapsedIndices,\r\n        collapsedSize,\r\n      });\r\n      moveCollapsedSiblings({\r\n        collapsedSize,\r\n        sizes,\r\n        minSizes,\r\n        collapsedIndices,\r\n        isReversed,\r\n        index,\r\n        offset,\r\n      });\r\n\r\n      return sizes;\r\n    },\r\n    [collapsedIndices, collapsedSize, isLtr, isReversed, minSizes, originalSizes]\r\n  );\r\n","import { useCallback } from 'react';\nimport { getRefSize } from '../../helpers';\nimport { ChildPane } from '../useSplitPaneResize';\nimport { SplitType } from '../..';\n\nexport const useGetCurrentPaneSizes = ({\n  childPanes,\n  split,\n}: {\n  childPanes: Pick<ChildPane, 'ref'>[];\n  split: SplitType;\n}) =>\n  useCallback(() => childPanes.map(({ ref }): number => getRefSize({ split, ref })), [\n    childPanes,\n    split,\n  ]);\n","import React, { useCallback } from 'react';\r\nimport { SplitPaneHooks } from '../..';\r\n\r\n/**\r\n * called at the end of a drag, sets the final size as well as runs the callback hook\r\n */\r\nexport const useHandleDragFinished = ({\r\n  setSizes,\r\n  hooks,\r\n  movedSizes,\r\n}: {\r\n  children: React.ReactChild[];\r\n  setSizes: React.Dispatch<React.SetStateAction<number[]>>;\r\n  movedSizes: number[];\r\n  hooks?: SplitPaneHooks;\r\n}) =>\r\n  useCallback(() => {\r\n    setSizes(movedSizes);\r\n    hooks?.onSaveSizes?.(movedSizes);\r\n  }, [movedSizes, hooks, setSizes]);\r\n","import { addArray } from '../../helpers';\nimport React, { useCallback } from 'react';\n\nexport const useRecalculateSizes = ({\n  getCurrentPaneSizes,\n  collapsedSize,\n  collapsedIndices,\n  setMovedSizes,\n  setSizes,\n}: {\n  getCurrentPaneSizes: () => number[];\n  collapsedIndices: number[];\n  collapsedSize: number;\n  originalMinSizes: number | number[] | undefined;\n  minSizes: number[];\n  setMovedSizes: React.Dispatch<React.SetStateAction<number[]>>;\n  setSizes: React.Dispatch<React.SetStateAction<number[]>>;\n}) =>\n  useCallback(\n    (initialSizes?: number[]) => {\n      const curSizes = getCurrentPaneSizes();\n      const ratio =\n        initialSizes && initialSizes.length > 0 ? addArray(curSizes) / addArray(initialSizes) : 1;\n      const initialRatioSizes = initialSizes ? initialSizes.map(size => size * ratio) : curSizes;\n      const adjustedSizes = initialRatioSizes.map((size, idx) => {\n        if (collapsedIndices.includes(idx)) {\n          return collapsedSize;\n        }\n        if (collapsedIndices.includes(idx - 1)) {\n          const totalPrevSizeToAdd = addArray(\n            collapsedIndices\n              .filter((_collapsedIdx, index) => index <= idx)\n              .map((_i, index) => initialRatioSizes[index] - collapsedSize)\n          );\n          return size + totalPrevSizeToAdd;\n        }\n        return size;\n      });\n      setMovedSizes(adjustedSizes);\n      setSizes(adjustedSizes);\n    },\n    [collapsedIndices, collapsedSize, getCurrentPaneSizes, setMovedSizes, setSizes]\n  );\n","import * as ReactDOM from 'react-dom';\r\nimport { useEventListener } from '../../../../hooks/useEventListener';\r\nimport { useCallback, useMemo, useState } from 'react';\r\n\r\nexport interface ClientPosition {\r\n  clientX: number;\r\n  clientY: number;\r\n}\r\n\r\nexport interface DragState {\r\n  offset: number;\r\n  index: number;\r\n}\r\nexport type BeginDragCallback = (props: { position: ClientPosition; index: number }) => void;\r\ninterface DragStateHandlers {\r\n  beginDrag: BeginDragCallback;\r\n  dragState: DragState | null;\r\n  onMouseMove?: (event: ClientPosition) => void;\r\n  onTouchMove?: (event: TouchEvent) => void;\r\n  onMouseUp?: () => void;\r\n  onMouseEnter?: (event: MouseEvent) => void;\r\n}\r\n\r\nconst useDragStateHandlers = (\r\n  isVertical: boolean,\r\n  onDragFinished: (dragState: DragState) => void\r\n): DragStateHandlers => {\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [dragStartPos, setDragStartPos] = useState<number | null>(null);\r\n  const [currentPos, setCurrentPos] = useState<number | null>(null);\r\n  const [draggingIndex, setDraggingIndex] = useState<number | null>(null);\r\n\r\n  const beginDrag: BeginDragCallback = useCallback(\r\n    ({ position, index }: { position: ClientPosition; index: number }): void => {\r\n      const pos = isVertical ? position.clientX : position.clientY;\r\n      ReactDOM.unstable_batchedUpdates(() => {\r\n        setDraggingIndex(index);\r\n        setIsDragging(true);\r\n        setDragStartPos(pos);\r\n        setCurrentPos(pos);\r\n      });\r\n    },\r\n    [isVertical]\r\n  );\r\n\r\n  const dragState: DragState | null = useMemo(() => {\r\n    if (isDragging && currentPos !== null && dragStartPos !== null && draggingIndex !== null) {\r\n      const offset = currentPos - dragStartPos;\r\n      return { offset, index: draggingIndex };\r\n    } else return null;\r\n  }, [currentPos, dragStartPos, draggingIndex, isDragging]);\r\n\r\n  const onMouseUp = useCallback((): void => {\r\n    if (isDragging && dragState) {\r\n      ReactDOM.unstable_batchedUpdates(() => {\r\n        setIsDragging(false);\r\n        onDragFinished(dragState);\r\n      });\r\n    }\r\n  }, [isDragging, dragState, onDragFinished]);\r\n\r\n  const onMouseMove = useCallback(\r\n    (event: ClientPosition): void => {\r\n      if (isDragging) {\r\n        const pos = isVertical ? event.clientX : event.clientY;\r\n        setCurrentPos(pos);\r\n      } else setCurrentPos(null);\r\n    },\r\n    [isDragging, isVertical]\r\n  );\r\n\r\n  const onTouchMove = useCallback(\r\n    (event: TouchEvent): void => {\r\n      if (isDragging) {\r\n        onMouseMove(event.touches[0]);\r\n      }\r\n    },\r\n    [isDragging, onMouseMove]\r\n  );\r\n  const onMouseEnter = useCallback(\r\n    (event: MouseEvent): void => {\r\n      if (isDragging) {\r\n        const isPrimaryPressed = (event.buttons & 1) === 1;\r\n        if (!isPrimaryPressed) {\r\n          onMouseUp();\r\n        }\r\n      }\r\n    },\r\n    [isDragging, onMouseUp]\r\n  );\r\n\r\n  return { beginDrag, dragState, onMouseMove, onTouchMove, onMouseUp, onMouseEnter };\r\n};\r\n\r\ninterface UseDragStateReturn {\r\n  dragState: DragState | null;\r\n  beginDrag: BeginDragCallback;\r\n}\r\nexport const useDragState = (\r\n  isVertical: boolean,\r\n  onDragFinished: (dragState: DragState) => void\r\n): UseDragStateReturn => {\r\n  const {\r\n    beginDrag,\r\n    dragState,\r\n    onMouseMove,\r\n    onTouchMove,\r\n    onMouseUp,\r\n    onMouseEnter,\r\n  } = useDragStateHandlers(isVertical, onDragFinished);\r\n\r\n  useEventListener('mousemove', onMouseMove);\r\n  useEventListener('touchmove', onTouchMove);\r\n  useEventListener('mouseup', onMouseUp);\r\n  useEventListener('mouseenter', onMouseEnter);\r\n\r\n  return { dragState, beginDrag };\r\n};\r\n","import React, { useCallback } from 'react';\nimport { moveCollapsedSiblings, moveSizes } from '../../helpers';\nimport * as ReactDOM from 'react-dom';\n\nexport const useCollapseSize = ({\n  isReversed,\n  movedSizes,\n  minSizes,\n  collapsedIndices,\n  setSizes,\n  setMovedSizes,\n  collapsedSize,\n}: {\n  isReversed: boolean;\n  movedSizes: number[];\n  minSizes: number[];\n  collapsedIndices: number[];\n  setSizes: React.Dispatch<React.SetStateAction<number[]>>;\n  setMovedSizes: React.Dispatch<React.SetStateAction<number[]>>;\n  collapsedSize: number;\n}) =>\n  useCallback(\n    ({ size, idx }: { idx: number; size: number }) => {\n      const offset = isReversed ? -(collapsedSize - size) : collapsedSize - size;\n      const index = isReversed ? idx - 1 : idx;\n      const sizes = [...movedSizes];\n      moveSizes({ sizes, index, offset, minSizes, collapsedIndices, collapsedSize });\n      moveCollapsedSiblings({\n        offset,\n        index,\n        isReversed,\n        collapsedIndices,\n        minSizes,\n        sizes,\n        collapsedSize,\n      });\n      ReactDOM.unstable_batchedUpdates(() => {\n        setMovedSizes(sizes);\n        setSizes(sizes);\n      });\n    },\n    [isReversed, collapsedSize, movedSizes, minSizes, collapsedIndices, setMovedSizes, setSizes]\n  );\n","import React, { useCallback } from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { moveSizes } from '../../helpers';\n\nexport const useUncollapseSize = ({\n  isReversed,\n  movedSizes,\n  minSizes,\n  setMovedSizes,\n  setSizes,\n  collapsedSize,\n  collapsedIndices,\n}: {\n  isReversed: boolean;\n  movedSizes: number[];\n  minSizes: number[];\n  setSizes: React.Dispatch<React.SetStateAction<number[]>>;\n  setMovedSizes: React.Dispatch<React.SetStateAction<number[]>>;\n  collapsedSize: number;\n  collapsedIndices: number[];\n}) =>\n  useCallback(\n    ({ size, idx }: { size: number; idx: number }) => {\n      const offset = isReversed ? -(size - 50) : size - 50;\n      const index = isReversed ? idx - 1 : idx;\n      const newSizes = [...movedSizes];\n      moveSizes({ sizes: newSizes, index, offset, minSizes, collapsedSize, collapsedIndices });\n      ReactDOM.unstable_batchedUpdates(() => {\n        setMovedSizes(newSizes);\n        setSizes(newSizes);\n      });\n    },\n    [collapsedIndices, collapsedSize, isReversed, minSizes, movedSizes, setMovedSizes, setSizes]\n  );\n","import React, { useCallback } from 'react';\nimport { useCollapseSize } from './useCollapseSize';\nimport { useUncollapseSize } from './useUncollapseSize';\nimport { SplitPaneHooks } from '../..';\nimport { Nullable } from '../../../../types/utilities';\n\nexport const useUpdateCollapsedSizes = ({\n  movedSizes,\n  setCollapsedSizes,\n  collapsedSizes,\n  collapseSize,\n  sizes,\n  hooks,\n  unCollapseSize,\n}: {\n  movedSizes: number[];\n  collapsedSizes: Nullable<number>[];\n  sizes: number[];\n  collapseSize: ReturnType<typeof useCollapseSize>;\n  unCollapseSize: ReturnType<typeof useUncollapseSize>;\n  setCollapsedSizes: React.Dispatch<React.SetStateAction<Nullable<number>[]>>;\n  hooks?: SplitPaneHooks;\n}) =>\n  useCallback(\n    (indices: number[]) => {\n      setCollapsedSizes(\n        collapsedSizes.map((size, idx) => {\n          const isCollapsed = indices.includes(idx);\n          if (isCollapsed && size === null) {\n            collapseSize({ size: sizes[idx], idx });\n            hooks?.onChange?.(sizes);\n            return movedSizes[idx]; // when collapsed store current size\n          }\n          if (!isCollapsed && size !== null) {\n            unCollapseSize({ idx, size }); // when un-collapsed clear size\n            hooks?.onChange?.(sizes);\n            return null;\n          }\n          return size;\n        })\n      );\n    },\n    [collapseSize, collapsedSizes, hooks, movedSizes, setCollapsedSizes, sizes, unCollapseSize]\n  );\n","import { useCallback } from 'react';\r\nimport { BeginDragCallback, ClientPosition } from '../effects/useDragState';\r\nimport { SplitPaneHooks } from '../..';\r\n\r\n/**\r\n * Callback that starts the drag process and called at the beginning of the dragging.\r\n */\r\nexport const useHandleDragStart = ({\r\n  isReversed,\r\n  hooks,\r\n  beginDrag,\r\n}: {\r\n  isReversed: boolean;\r\n  hooks?: SplitPaneHooks;\r\n  beginDrag: BeginDragCallback;\r\n}) =>\r\n  useCallback(\r\n    ({ index, position }: { index: number; position: ClientPosition }): void => {\r\n      hooks?.onDragStarted?.();\r\n      beginDrag({ position, index: isReversed ? index - 1 : index });\r\n    },\r\n    [beginDrag, hooks, isReversed]\r\n  );\r\n","import React, { useCallback } from 'react';\n\nexport const useToggleCollapse = ({\n  collapsedIndices,\n  setCollapsed,\n}: {\n  collapsedIndices: number[];\n  setCollapsed: React.Dispatch<React.SetStateAction<number[]>>;\n}) =>\n  useCallback(\n    (index: number) => {\n      collapsedIndices.includes(index)\n        ? setCollapsed(collapsedIndices.filter(i => i !== index))\n        : setCollapsed([...collapsedIndices, index]);\n    },\n    [collapsedIndices, setCollapsed]\n  );\n","import { useCallback } from 'react';\n\nexport const useGetIsPaneCollapsed = ({ collapsedIndices }: { collapsedIndices: number[] }) =>\n  useCallback(\n    (paneIndex: number) =>\n      collapsedIndices.length > 0 ? collapsedIndices.includes(paneIndex) : false,\n    [collapsedIndices]\n  );\n"],"names":["useMergeClasses","classes","useMemo","filter","c","join","verticalCss","css","horizontalCss","coverCss","PaneRoot","styled","div","props","$isVertical","$shouldAnimate","$timeout","WidthPreserver","$isCollapsed","CollapseOverlay","UnMemoizedPane","size","minSize","isCollapsed","collapseOverlayCss","background","isVertical","children","forwardRef","collapsedIndices","transitionTimeout","split","className","timeout","useState","shouldAnimate","setShouldAnimate","didMount","useRef","useEffect","current","setTimeout","minStyle","minWidth","minHeight","widthPreserverStyle","userSelect","React","ref","style","flexBasis","displayName","Pane","topBottomCss","leftRightCss","ButtonWrapper","ButtonContainer","$grabberSize","ResizeGrabber","$isLtr","ResizePresentation","transitionComponentMap","fade","Fade","grow","Grow","zoom","Zoom","none","getMinSize","index","minSizes","Array","value","moveSizes","offset","sizes","collapsedSize","length","idx","includes","firstMinSize","secondMinSize","firstSize","secondSize","missing","moveCollapsedSiblings","isReversed","i","Wrapper","addArray","arr","reduce","prev","cur","debounce","func","waitFor","args","clearTimeout","defaultResizerOptions","grabberSize","backgroundColor","hoverCss","Resizer","paneIndex","onDragStarted","collapseOptions","onCollapseToggle","isLtr","resizerOptions","grabberSizeWithUnit","isNaN","toString","Transition","buttonTransition","useTransition","isHovered","setIsHovered","handleMouseDown","useCallback","event","preventDefault","position","handleTouchStart","touches","handleButtonClick","stopPropagation","handleButtonMousedown","debouncedSetHovered","handleMouseEnterGrabber","debouncedSetNotHovered","handleMouseLeaveGrabber","getWidthOrHeight","width","height","preButtonFlex","Math","max","buttonPositionOffset","postButtonFlex","isTransition","collapseButton","flex","buttonTransitionTimeout","onClick","onMouseDown","afterToggleButton","beforeToggleButton","key","role","onTouchStart","onMouseEnter","onMouseLeave","Direction","useEventListener","type","listener","abortController","AbortController","window","addEventListener","removeEventListener","abort","useIsCollapseReversed","collapseDirection","isCollapseDirectionReversed","Button","paths","left","right","up","down","Icon","focusable","fill","viewBox","d","dir","CollapseButton","dirs","reverse","a","b","isBefore","getDefault","overlayCss","collapseTransitionTimeout","SplitPane","collapsedSizes","collapse","useCollapsedSizes","originalValue","orientationDetails","undefined","useCollapseOptions","setCollapsed","options","originalChildren","originalDefaults","initialSizes","originalMinSizes","hooks","originalCollapsedSizes","isArray","paneRefs","Map","numSizes","from","map","_child","useMinSizes","useCollapsedSize","childPanes","prevPaneRefs","node","get","set","useChildPanes","_c","setSizes","movedSizes","setMovedSizes","setCollapsedSizes","getMovedSizes","originalSizes","dragState","useGetMovedSizes","getCurrentPaneSizes","sizeAttr","_ref$current","getBoundingClientRect","getRefSize","useGetCurrentPaneSizes","handleDragFinished","onSaveSizes","useHandleDragFinished","recalculateSizes","curSizes","ratio","initialRatioSizes","adjustedSizes","_collapsedIdx","_i","useRecalculateSizes","onDragFinished","isDragging","setIsDragging","dragStartPos","setDragStartPos","currentPos","setCurrentPos","draggingIndex","setDraggingIndex","beginDrag","pos","clientX","clientY","ReactDOM","onMouseUp","onMouseMove","onTouchMove","buttons","useDragStateHandlers","useDragState","collapseSize","useCollapseSize","unCollapseSize","newSizes","useUncollapseSize","updateCollapsedSizes","indices","onChange","useUpdateCollapsedSizes","onCollapse","resetSizes","childPanesWithSizes","child","handleDragStart","useHandleDragStart","resizingIndex","useSplitPaneResize","splitPaneClass","resizingClass","toggleCollapse","useToggleCollapse","getIsPaneCollapsed","useGetIsPaneCollapsed","entries","pane","resizerPaneIndex","Fragment"],"mappings":"sgBAEO,oBAAMA,EAAkB,SAACC,UAC9BC,WAAQ,kBAAMD,EAAQE,QAAO,SAAAC,UAAKA,KAAGC,KAAK,OAAM,CAACJ,KCI7CK,EAAcC,sDAIdC,EAAgBD,sDAIhBE,EAAWF,iGAaXG,EAAWC,EAAOC,sKAQpB,SAAAC,UAAUA,EAAMC,YAAcR,EAAcE,KAC5C,SAAAK,UAASA,EAAME,0CAA4CF,EAAMG,6BAE/DC,EAAiBN,EAAOC,mCAC1BH,GACA,SAAAI,UACAA,EAAMK,cACNX,2FAQEY,EAAkBR,EAAOC,gGAC3B,SAAAC,UAASA,EAAMK,cAAgBT,KAC/B,SAAAI,UACAA,EAAMK,cACNX,kDAGS,SAAAM,UAAUA,EAAMK,aAAe,EAAI,KACxB,SAAAL,UAASA,EAAMG,YAgBjCI,EAAiB,gBACrBC,IAAAA,KACAC,IAAAA,QACAC,IAAAA,gBACAC,mBAAAA,aAAqB,CAAEC,WAAY,4BACnCC,IAAAA,WAGAC,IAAAA,SACAC,IAAAA,WACAC,IAAAA,iBACAC,IAAAA,kBAEM7B,EAAUD,EAAgB,CAAC,SAPjC+B,QACAC,YAOMC,EAAU/B,WAAQ,wBAAM4B,EAAAA,EAnFY,MAmF8C,CACtFA,MAEwCI,YAAS,GAA5CC,OAAeC,OAEhBC,EAAWC,UAAO,GAExBC,aAAU,WACJF,EAASG,QACK,IAAZP,IACFG,GAAiB,GACjBK,YAAW,kBAAML,GAAiB,KAAQ,MAG5CC,EAASG,SAAU,IAEpB,CAACJ,EAAkBP,EAAkBI,QAElCS,EAAWxC,WAAQ,kBAAOwB,EAAa,CAAEiB,SAAUrB,GAAY,CAAEsB,UAAWtB,KAAY,CAC5FA,EACAI,IAEImB,EAA2CtB,OACxCmB,GAAUI,WAAY,SAC3BJ,SAEFK,gBAACrC,eACcgB,iBACe,IAAZO,GAAiBE,WACvBF,EACVD,UAAW/B,EACX+C,IAAKpB,EACLqB,MAAO,CAAEC,UAAW7B,IAEpB0B,gBAAC5B,gBAA8BI,WAAuBU,EAASgB,MAAOzB,IACtEuB,gBAAC9B,gBAA6BM,EAAa0B,MAAOJ,GAC/ClB,KAMTP,EAAe+B,YAAc,OACtB,sBAAMC,EAAOL,OAAW3B,GC/HlBiC,EAAe9C,iDAItB+C,EAAe/C,iDAKRgD,EAAgB5C,EAAOC,iEASvB4C,EAAkB7C,EAAOC,oMASlC,SAAAC,UAAYA,EAAMC,YAAc,QAAU,eAAaD,EAAM4C,gBAC7D,SAAA5C,UAAUA,EAAMC,YAAcuC,EAAeC,KAOpCI,EAAgB/C,EAAOC,sGAGrB,SAAAC,UACXA,EAAMC,2BAA4BD,EAAM8C,OAAS,IAAM,WAAW,sBAC1D,SAAA9C,UAAUA,EAAMK,eAAiBL,EAAMC,YAAc,aAAe,iBAC5E,SAAAD,UAAUA,EAAMC,YAAcuC,EAAeC,KAGpCM,EAAqBjD,EAAOC,mEAGrC,SAAAC,UAAUA,EAAMC,YAAcuC,EAAeC,KChD3CO,EAEF,CACFC,KAAMC,OACNC,KAAMC,OACNC,KAAMC,OACNC,KAAML,QCHKM,EAAa,SAACC,EAAeC,MAChB,iBAAbA,MACLA,EAAW,SACNA,OAEJ,GAAIA,aAAoBC,MAAO,KAC9BC,EAAQF,EAASD,MACnBG,EAAQ,SACHA,SAVmB,IAsCnBC,EAAY,SAAZA,SACXJ,IAAAA,MACAC,IAAAA,SACAI,IAAAA,OACAC,IAAAA,MACA/C,IAAAA,iBACAgD,IAAAA,kBAGKF,GAAUL,EAAQ,GAAKA,EAAQ,GAAKM,EAAME,cACtC,MAEHvD,EAAc,SAACwD,UAAgBlD,EAAiBmD,SAASD,IACzDE,EAAe1D,EAAY+C,GAASO,EAAgBR,EAAWC,EAAOC,GACtEW,EAAgB3D,EAAY+C,EAAQ,GAAKO,EAAgBR,EAAWC,EAAQ,EAAGC,GAC/EY,EAAYP,EAAMN,GAASK,EAC3BS,EAAaR,EAAMN,EAAQ,GAAKK,KAElCA,EAAS,GAAKQ,EAAYF,EAAc,KACpCI,EAAUF,EAAYF,EAU5BN,GAAUU,EATWX,EAAU,CAC7BE,MAAAA,EACAN,MAAOA,EAAQ,EACfK,OAAQU,EACRd,SAAAA,EACA1C,iBAAAA,EACAgD,cAAAA,SAIG,GAAIF,EAAS,GAAKS,EAAaF,EAAe,KAC7CG,EAAUH,EAAgBE,EAUhCT,GAAUU,EATWX,EAAU,CAC7BE,MAAAA,EACAN,MAAOA,EAAQ,EACfK,OAAQU,EACRd,SAAAA,EACA1C,iBAAAA,EACAgD,cAAAA,WAKJD,EAAMN,IAAUK,EAChBC,EAAMN,EAAQ,IAAMK,EAEbA,GAeIW,EAAwB,gBACnCX,IAAAA,OACAY,IAAAA,WACA1D,IAAAA,iBACA0C,IAAAA,SACAK,IAAAA,MACAN,IAAAA,MACAO,IAAAA,iBAEIU,EAAaZ,EAAS,EAAIA,EAAS,MAEnC,IAAIa,EAAID,EAAajB,EAAQA,EAAQ,EACrCiB,EAAaC,EAAI,EAAIA,EAAIZ,EAAME,OAAS,EACxCS,EAAaC,IAAMA,IAEf3D,EAAiBmD,SAASQ,IAC5Bd,EAAU,CACRE,MAAAA,EACAN,MAAOiB,EAAaC,EAAI,EAAIA,EAC5Bb,OAAAA,EACAJ,SAAAA,EACA1C,iBAAAA,EACAgD,cAAAA,KAOJvE,EAAcC,yEAKdC,EAAgBD,iHAOTkF,EAAU9E,EAAOC,0IAO1B,SAAAC,SAA0B,aAAhBA,EAAMkB,MAAuBzB,EAAcE,KAU5CkF,EAAW,SAACC,UAAkBA,EAAIC,QAAO,SAACC,EAAMC,UAAQD,EAAOC,IAAK,IAOpEC,EAAW,SAAoCC,EAASC,OAC/DhE,EAAgD,YAElC,sCAAIiE,2BAAAA,kBACJ,OAAZjE,IACFkE,aAAalE,GACbA,EAAU,MAEZA,EAAUQ,YAAW,kBAAMuD,eAAQE,KAAOD,KCjKxCG,EAAkD,CACtDC,YAAa,OACb9F,IAAK,CAAE+F,gBAAiB,4BACxBC,SAAU,CAAED,gBAAiB,6BAelBE,EAAU,gBACrB9E,IAAAA,WACAK,IAAAA,MACAC,IAAAA,UACAyE,IAAAA,UACAC,IAAAA,cAEAC,IAAAA,gBACAC,IAAAA,iBACAC,IAAAA,MACAtF,IAAAA,mBAE4C6E,IAN5CU,gBAMQT,IAAAA,YAAa9F,IAAAA,IAAKgG,IAAAA,SAEpBtG,EAAUD,EAAgB,CAAC,UAAW+B,EAAOC,IAC7C+E,EAAsB7G,WAAQ,kBHMNmB,EGN4BgF,EHO1DW,MAAM3F,GAAkBA,EAAK4F,WAAgB5F,OADhB,IAACA,IGN0C,CAACgF,IACnEa,EFrCqB,SAACP,UAC5BzG,WAAQ,wBAAM2D,iBAAuB8C,SAAAA,EAAiBQ,oBAAoB,UAAS,CACjFR,IEmCiBS,CAAcT,KAECzE,YAAS,GAApCmF,OAAWC,OAEZC,EAAkBC,eACtB,SAACC,GACCA,EAAMC,iBACDnG,GACHmF,EAAc,CAAEpC,MAAOmC,EAAWkB,SAAUF,MAGhD,CAAChB,EAAWlF,EAAamF,IAErBkB,EAAmBJ,eACvB,SAACC,GACCA,EAAMC,iBACDnG,GACHmF,EAAc,CAAEpC,MAAOmC,EAAWkB,SAAUF,EAAMI,QAAQ,OAG9D,CAACpB,EAAWlF,EAAamF,IAErBoB,EAAoBN,eACxB,SAACC,GACCA,EAAMM,kBACNnB,EAAiBH,KAEnB,CAACA,EAAWG,IAERoB,EAAwBR,eAAY,SAACC,GACzCA,EAAMM,oBACL,IAEGE,EAAsBT,cAC1BzB,GAAS,kBAAMuB,GAAa,KAAO,IACnC,CAACA,IAEGY,EAA0BV,eAAY,WAC1CS,MACC,CAACA,IAEEE,EAAyBX,cAC7BzB,GAAS,kBAAMuB,GAAa,KAAQ,KACpC,CAACA,IAEGc,EAA0BZ,eAAY,kBAAMW,MAA0B,CAC1EA,IAGIE,EAAmBb,eACvB,SAACnG,UAA2BK,EAAa,CAAE4G,MAAOjH,GAAS,CAAEkH,OAAQlH,KACrE,CAACK,IAEG8G,EAAgBtI,WACpB,wBAAMuI,KAAKC,IAAI,oBAAO/B,SAAAA,EAAiBgC,wBAAwB,GAAI,KACnE,CAAChC,IAEGiC,EAAiB1I,WACrB,wBAAMuI,KAAKC,IAAI,oBAAO/B,SAAAA,EAAiBgC,wBAAwB,GAAI,KACnE,CAAChC,IAEGkC,EAAqD,gBAAtClC,SAAAA,EAAiBQ,kBAChC2B,EAAiBnC,EACrB5D,gBAACS,eAA6B9B,eAA0BqF,SAA6BF,GACnF9D,uBAAKE,MAAO,CAAE8F,YAAaP,KAC3BzF,gBAACmE,OACK2B,GAAexB,EACnBpF,QAAS4G,EAAelC,EAAgBqC,wBAA0B,EAClE/F,MAAO,CAAE8F,KAAM,QAASpB,SAAU,aAElC5E,gBAACQ,eACc7B,EACbuH,QAASnB,EACToB,YAAalB,GAEZzG,EAAcoF,EAAgBwC,kBAAoBxC,EAAgByC,qBAGvErG,uBAAKE,MAAO,CAAE8F,YAAaH,MAE3B,YAGF7F,uBAAKsG,IAAI,eAAepG,MAAO,CAAE0E,SAAU,aACzC5E,gBAACW,GACC2F,IAAI,sBACS3H,eACCH,SACNsF,EACR5D,MAAOoF,EAAiBhC,GACxBiD,KAAK,eACLtH,UAAW/B,EACXiJ,YAAa3B,EACbgC,aAAc3B,EACd4B,aAActB,EACduB,aAAcrB,GAEbU,GAEH/F,gBAACgB,QAAKsF,IAAI,iCAAkChC,GAC1CtE,gBAACa,eAAgClC,EAAYuB,WAAYoF,EAAiB,GAAO9H,MAEnFwC,gBAACgB,QAAKsF,IAAI,iCAAkChC,GAC1CtE,gBAACa,eACclC,EACbuB,WAAYoF,EAAiB,GAAO9B,QAM9CC,EAAQrD,YAAc,kBC3IjBuG,GCpBQC,GAAmB,SAC9BC,EACAC,UAEAtH,aAAU,eACFuH,EAAkB,IAAIC,mBACvBF,SACLG,OAAOC,iBAAiBL,EAAMC,GACvB,WACLG,OAAOE,oBAAoBN,EAAMC,GACjCC,EAAgBK,WAEjB,CAACP,EAAMC,KCFCO,GAAwB,SAACzD,UACpCzG,WAAQ,kBAViC,SACzCyG,SAE+B,kBAApBA,WACJA,IAAAA,EAAiB0D,oBACpB,CAAC,QAAS,QAAQrF,SAAS2B,EAAgB0D,mBAKjCC,CAA4B3D,KAAkB,CAACA,KFVzD4D,GAAS5J,EAAOC,uWAmBtB,SAAK8I,GACHA,mBACAA,qBACAA,eACAA,mBAJF,CAAKA,KAAAA,QAOL,IAAMc,WACHd,GAAUe,MAAO,kDACjBf,GAAUgB,OAAQ,mDAClBhB,GAAUiB,IAAK,mDACfjB,GAAUkB,MAAO,6DAOdC,GAA4B,SAAAhK,UAChCkC,uCAASlC,GAAOiK,UAAU,QAAQC,KAAK,QAAQC,QAAQ,0BAAwB,SAC7EjI,wBAAMkI,EAAGT,GAAM3J,EAAMqK,SAUZC,GAAgD,SAAAtK,OACrDuK,EAAoBvK,EAAMa,WAC5B,CAACgI,GAAUe,KAAMf,GAAUgB,OAC3B,CAAChB,GAAUiB,GAAIjB,GAAUkB,QACd/J,EAAM0E,WAAa6F,EAAKC,UAAYD,EAA5CE,OAAGC,cAGRxI,gBAACwH,QACCxH,gBAAC8H,IAAKK,IAHarK,EAAM2K,SAAY3K,EAAMgG,MAAQyE,EAAIC,EAAK1K,EAAMgG,MAAQ0E,EAAID,MGrD9EG,GAAa,SAAC5K,SAII,CACtBuI,mBAAoBrG,gBAACoI,oBAAmBtK,GAAO2K,UAAU,KACzDrC,kBAAmBpG,gBAACoI,oBAAmBtK,GAAO2K,UAAU,KACxDnB,kBAAmBxJ,EAAMa,WAAa,OAAS,KAC/CgK,WAAY,CAAEpF,gBAAiB,sBAC/B0C,wBAAyB,IACzB7B,iBAAkB,OAClBtC,cAAe,GACf8G,0BAA2B,IAC3BhD,qBAAsB,IC2CXiD,GAAsC,SAAA/K,SCzDxBkB,EAAOmJ,EP2JYtG,IMjGtCiH,EE1DyB,gBAC/BA,IAAAA,eACAlK,IAAAA,SACAmK,IAAAA,gBAEA5L,WACE,wBACE2L,SAAAA,EAAgB/G,UAAWnD,EAASmD,QAAYgH,EAC5CD,EACA,IAAIrH,MAAM7C,EAASmD,QAAQiG,KAAK,QACtC,CAACpJ,EAASmD,OAAQgH,EAAUD,IFgDPE,CAAkBlL,GACnCgG,EC1DN3G,WAAQ,iBAAiB,aAAV6B,GAA+B,QAARmJ,IAAuB,CADpCnJ,KD2DFlB,GC3DEkB,MAAOmJ,IAAAA,MD4D1BxJ,EAA6B,aAAhBb,EAAMkB,MACnBwD,EAAa6E,GAAsBvJ,EAAMiL,UAEzCnF,ED3C0B,gBAChCqF,IAAAA,cACGC,kKAOmBC,IAAlBF,IAAiD,IAAlBA,SACb,IAAlBA,EAA+BP,GAAWQ,QAClCR,GAAWQ,GAAwBD,GCgCvBG,CAAmB,CACzCzK,WAAAA,EACAmF,MAAAA,EACAmF,cAAenL,EAAMiL,SACrBvG,WAAAA,MAGuCrD,2BNqFG0C,EMpFZiH,UNqFhCjH,EAAOgB,QAAO,SAACC,EAAMC,EAAKf,UAAiB,OAARe,YAAmBD,GAAMd,cAAWc,KAAQ,OAC/E,IMvFOhE,OAAkBuK,SG7BO,SAACC,SAErBC,EAURD,EAVF1K,SACAI,EASEsK,EATFtK,MACcwK,EAQZF,EARFG,aACUC,EAORJ,EAPF9H,SACAmI,EAMEL,EANFK,MACA7K,EAKEwK,EALFxK,iBACgB8K,EAIdN,EAJFR,eACAlF,EAGE0F,EAHF1F,gBACAjF,EAEE2K,EAFF3K,WACAmF,EACEwF,EADFxF,MAGIlF,EAAY6C,MAAMoI,QAAQN,GAAyCA,EAArB,CAACA,GAE/CO,EAAWvK,SAAO,IAAIwK,KAEtBvI,ECvDmB,gBACzBA,IAAAA,SACAwI,IAAAA,SACAlL,IAAAA,iBACA8E,IAAAA,uBAOAzG,WACE,kBACEsE,MAAMwI,KAAK,CAAElI,OAAQiI,IAAYE,KAAI,SAACC,EAAQnI,gBAC5ClD,EAAiBmD,SAASD,kBACtB4B,SAAAA,EAAiB9B,iBVjBG,GUkBpBR,EAAWU,EAAKR,QAExB,CAACwI,EAAUpG,EAAiB9E,EAAkB0C,IDqC/B4I,CAAY,CAC3B5I,SAAUkI,EACVM,SAAUpL,EAASmD,OACnB6B,gBAAAA,EACA9E,iBAAAA,IAEIgD,EEhEwB,gBAAG8B,IAAAA,uBACjCzG,WAAQ,uCAAMyG,SAAAA,EAAiB9B,iBAHI,KAGoC,CAAC8B,IF+DlDyG,CAAiB,CAAEzG,gBAAAA,IACnC0G,EGhEqB,gBAC3BR,IAAAA,SACAlL,IAAAA,SACA4C,IAAAA,gBAM8CrE,WAAQ,eAC9CoN,EAAeT,EAASrK,eAC9BqK,EAASrK,QAAU,IAAIsK,IAChBnL,EAASsL,KAAI,SAACM,EAAMjJ,OACnB+E,WAAe/E,EACftB,EAAMsK,EAAaE,IAAInE,IAAQtG,qBACrC8J,EAASrK,QAAQiL,IAAIpE,EAAKrG,GACnB,CAAEqG,IAAAA,EAAKkE,KAAAA,EAAMvK,IAAAA,EAAK1B,QAASiD,EAASD,SAE5C,CAAC3C,EAAU4C,EAAUsI,IH8CLa,CAAc,CAAEnJ,SAAAA,EAAU5C,SAAAA,EAAUkL,SAAAA,IACjDtH,EAAa6E,GAAsBzD,GACnC6F,EAAetM,WAAQ,kBAAMyB,EAASsL,KAAI,SAACU,EAAI5I,+BAAQwH,SAAAA,EAAmBxH,MAAQ,OAAI,CAC1FpD,EACA4K,MAIwBrK,WAAmBsK,GAAtC5H,OAAOgJ,SACsB1L,WAAmB0C,GAAhDiJ,OAAYC,SACyB5L,iBAC1CyK,EAAAA,EAA0B,IAAInI,MAAM7C,EAASmD,QAAQiG,KAAK,OADrDc,OAAgBkC,OAIjBC,EI/EwB,gBACvBC,IAAPrJ,MACAiC,IAAAA,MACAtC,IAAAA,SACA1C,IAAAA,iBACA0D,IAAAA,WACAV,IAAAA,qBASA2C,eACE,SAAC0G,OACOtJ,YAAYqJ,GACZ3J,EAAQ4J,EAAU5J,MAClBK,EAASkC,EAAQqH,EAAUvJ,QAAUuJ,EAAUvJ,cACrDD,EAAU,CACRE,MAAAA,EACAN,MAAAA,EACAK,OAAAA,EACAJ,SAAAA,EACA1C,iBAAAA,EACAgD,cAAAA,IAEFS,EAAsB,CACpBT,cAAAA,EACAD,MAAAA,EACAL,SAAAA,EACA1C,iBAAAA,EACA0D,WAAAA,EACAjB,MAAAA,EACAK,OAAAA,IAGKC,IAET,CAAC/C,EAAkBgD,EAAegC,EAAOtB,EAAYhB,EAAU0J,IJuC3CE,CAAiB,CACrC5J,SAAAA,EACAK,MAAAA,EACAiC,MAAAA,EACAhC,cAAAA,EACAhD,iBAAAA,EACA0D,WAAAA,IAEI6I,EKtF8B,gBACpCf,IAAAA,WACAtL,IAAAA,aAKAyF,eAAY,kBAAM6F,EAAWJ,KAAI,mBdST,oBAOlBoB,EAAqB,eAL3BtM,MAKwC,QAAU,oCANlDiB,IAOWR,gBAAJ8L,EAAaC,wBAAwBF,MAAa,EcjBHG,CAAW,CAAEzM,MAAAA,EAAOiB,MAAtCA,WAA+C,CACjFqK,EACAtL,IL6E0B0M,CAAuB,CAAEpB,WAAAA,EAAYtL,MAAAA,IAC3D2M,EMtF6B,gBACnCd,IAAAA,SACAlB,IAAAA,MACAmB,IAAAA,kBAOArG,eAAY,WACVoG,EAASC,SACTnB,SAAAA,EAAOiC,aAAPjC,EAAOiC,YAAcd,KACpB,CAACA,EAAYnB,EAAOkB,INyEIgB,CAAsB,CAAEf,WAAAA,EAAYlM,SAAAA,EAAU+K,MAAAA,EAAOkB,SAAAA,IAC1EiB,EO1F2B,gBACjCT,IAAAA,oBACAvJ,IAAAA,cACAhD,IAAAA,iBACAiM,IAAAA,cACAF,IAAAA,gBAUApG,eACE,SAACgF,OACOsC,EAAWV,IACXW,EACJvC,GAAgBA,EAAa1H,OAAS,EAAIY,EAASoJ,GAAYpJ,EAAS8G,GAAgB,EACpFwC,EAAoBxC,EAAeA,EAAaS,KAAI,SAAA5L,UAAQA,EAAO0N,KAASD,EAC5EG,EAAgBD,EAAkB/B,KAAI,SAAC5L,EAAM0D,UAC7ClD,EAAiBmD,SAASD,GACrBF,EAELhD,EAAiBmD,SAASD,EAAM,GAM3B1D,EALoBqE,EACzB7D,EACG1B,QAAO,SAAC+O,EAAe5K,UAAUA,GAASS,KAC1CkI,KAAI,SAACkC,EAAI7K,UAAU0K,EAAkB1K,GAASO,MAI9CxD,KAETyM,EAAcmB,GACdrB,EAASqB,KAEX,CAACpN,EAAkBgD,EAAeuJ,EAAqBN,EAAeF,IPoD/CwB,CAAoB,CAC3CtB,cAAAA,EACAvJ,SAAAA,EACA1C,iBAAAA,EACAgD,cAAAA,EACAuJ,oBAAAA,EACAR,SAAAA,EACAnB,iBAAAA,MQFwB,SAC1B/K,EACA2N,SA7E2B,SAC3B3N,EACA2N,SAEoCnN,YAAS,GAAtCoN,OAAYC,SACqBrN,WAAwB,MAAzDsN,OAAcC,SACevN,WAAwB,MAArDwN,OAAYC,SACuBzN,WAAwB,MAA3D0N,OAAeC,OAEhBC,EAA+BtI,eACnC,gBAAGG,IAAAA,SAAUrD,IAAAA,MACLyL,EAAMrO,EAAaiG,EAASqI,QAAUrI,EAASsI,QACrDC,2BAAiC,WAC/BL,EAAiBvL,GACjBiL,GAAc,GACdE,EAAgBM,GAChBJ,EAAcI,QAGlB,CAACrO,IAGGwM,EAA8BhO,WAAQ,kBACtCoP,GAA6B,OAAfI,GAAwC,OAAjBF,GAA2C,OAAlBI,EAEzD,CAAEjL,OADM+K,EAAaF,EACXlL,MAAOsL,GACZ,OACb,CAACF,EAAYF,EAAcI,EAAeN,IAEvCa,EAAY3I,eAAY,WACxB8H,GAAcpB,GAChBgC,2BAAiC,WAC/BX,GAAc,GACdF,EAAenB,QAGlB,CAACoB,EAAYpB,EAAWmB,IAErBe,EAAc5I,eAClB,SAACC,GAGGkI,EAFEL,EACU5N,EAAa+F,EAAMuI,QAAUvI,EAAMwI,QAE5B,QAEvB,CAACX,EAAY5N,IAGT2O,EAAc7I,eAClB,SAACC,GACK6H,GACFc,EAAY3I,EAAMI,QAAQ,MAG9B,CAACyH,EAAYc,IAET5G,EAAehC,eACnB,SAACC,GACK6H,IAC+C,IAAP,EAAhB7H,EAAM6I,UAE9BH,OAIN,CAACb,EAAYa,UAGR,CAAEL,UAAAA,EAAW5B,UAAAA,EAAWkC,YAAAA,EAAaC,YAAAA,EAAaF,UAAAA,EAAW3G,aAAAA,GAkBhE+G,CAAqB7O,EAAY2N,GANnCS,IAAAA,UACA5B,IAAAA,UAEAmC,IAAAA,YACAF,IAAAA,UACA3G,IAAAA,oBAGFG,GAAiB,cANfyG,aAOFzG,GAAiB,YAAa0G,GAC9B1G,GAAiB,UAAWwG,GAC5BxG,GAAiB,aAAcH,GAExB,CAAE0E,UAAAA,EAAW4B,UAAAA,GRZaU,CAAa9O,EAAYgN,GAAlDR,IAAAA,UAAW4B,IAAAA,UAEbW,EStGuB,gBAC7BlL,IAAAA,WACAsI,IAAAA,WACAtJ,IAAAA,SACA1C,IAAAA,iBACA+L,IAAAA,SACAE,IAAAA,cACAjJ,IAAAA,qBAUA2C,eACE,gBAAGnG,IAAAA,KAAM0D,IAAAA,IACDJ,EAASY,IAAeV,EAAgBxD,GAAQwD,EAAgBxD,EAChEiD,EAAQiB,EAAaR,EAAM,EAAIA,EAC/BH,YAAYiJ,GAClBnJ,EAAU,CAAEE,MAAAA,EAAON,MAAAA,EAAOK,OAAAA,EAAQJ,SAAAA,EAAU1C,iBAAAA,EAAkBgD,cAAAA,IAC9DS,EAAsB,CACpBX,OAAAA,EACAL,MAAAA,EACAiB,WAAAA,EACA1D,iBAAAA,EACA0C,SAAAA,EACAK,MAAAA,EACAC,cAAAA,IAEFqL,2BAAiC,WAC/BpC,EAAclJ,GACdgJ,EAAShJ,QAGb,CAACW,EAAYV,EAAegJ,EAAYtJ,EAAU1C,EAAkBiM,EAAeF,ITiEhE8C,CAAgB,CACnC5C,cAAAA,EACAF,SAAAA,EACArJ,SAAAA,EACAsJ,WAAAA,EACAtI,WAAAA,EACA1D,iBAAAA,EACAgD,cAAAA,IAEI8L,EU/GyB,gBAC/BpL,IAAAA,WACAsI,IAAAA,WACAtJ,IAAAA,SACAuJ,IAAAA,cACAF,IAAAA,SACA/I,IAAAA,cACAhD,IAAAA,wBAUA2F,eACE,gBAAGnG,IAAAA,KAAM0D,IAAAA,IACDJ,EAASY,IAAelE,EAAO,IAAMA,EAAO,GAC5CiD,EAAQiB,EAAaR,EAAM,EAAIA,EAC/B6L,YAAe/C,GACrBnJ,EAAU,CAAEE,MAAOgM,EAAUtM,MAAAA,EAAOK,OAAAA,EAAQJ,SAAAA,EAAUM,cAAAA,EAAehD,iBAAAA,IACrEqO,2BAAiC,WAC/BpC,EAAc8C,GACdhD,EAASgD,QAGb,CAAC/O,EAAkBgD,EAAeU,EAAYhB,EAAUsJ,EAAYC,EAAeF,IVmF9DiD,CAAkB,CACvCtL,WAAAA,EACAsI,WAAAA,EACAtJ,SAAAA,EACAuJ,cAAAA,EACAF,SAAAA,EACA/I,cAAAA,EACAhD,iBAAAA,IAEIiP,EWtH+B,gBACrCjD,IAAAA,WACAE,IAAAA,kBACAlC,IAAAA,eACA4E,IAAAA,aACA7L,IAAAA,MACA8H,IAAAA,MACAiE,IAAAA,sBAUAnJ,eACE,SAACuJ,GACChD,EACElC,EAAeoB,KAAI,SAAC5L,EAAM0D,OAClBxD,EAAcwP,EAAQ/L,SAASD,UACjCxD,GAAwB,OAATF,GACjBoP,EAAa,CAAEpP,KAAMuD,EAAMG,GAAMA,IAAAA,UACjC2H,SAAAA,EAAOsE,UAAPtE,EAAOsE,SAAWpM,GACXiJ,EAAW9I,IAEfxD,GAAwB,OAATF,EAKbA,GAJLsP,EAAe,CAAE5L,IAAAA,EAAK1D,KAAAA,UACtBqL,SAAAA,EAAOsE,UAAPtE,EAAOsE,SAAWpM,GACX,YAMf,CAAC6L,EAAc5E,EAAgBa,EAAOmB,EAAYE,EAAmBnJ,EAAO+L,IXkFjDM,CAAwB,CACnDrM,MAAAA,EACAiH,eAAAA,EACAkC,kBAAAA,EACAF,WAAAA,EACA4C,aAAAA,EACAE,eAAAA,EACAjE,MAAAA,IAIFnK,aAAU,WACU,OAAd2L,GAAoBJ,EAAcE,EAAcE,MAEnD,CAACA,IACJ3L,aAAU,WACU,OAAd2L,UAAoBxB,SAAAA,EAAOsE,UAAPtE,EAAOsE,SAAWnD,MACzC,CAACK,EAAWL,EAAYnB,IAC3BnK,aAAU,iBACRmK,SAAAA,EAAOwE,YAAPxE,EAAOwE,WAAarF,KACnB,CAACA,EAAgBa,IACpBnK,aAAU,WACRuO,EAAqBjP,KAEpB,CAACA,QAGEsP,EAAa3J,cACjBzB,GAAS,kBAAM8I,MAAoB,KACnC,CAACA,IAEHlF,GAAiB,SAAUwH,GAC3B5O,aACE,kBAAMsM,EAAiBrC,aAKnB4E,EAAmClR,WACvC,kBACEmN,EAAWJ,KAAI,SAACoE,EAAO/M,eACT+M,GAAOhQ,KAAMwM,EAAWvJ,UAExC,CAAC+I,EAAYQ,IAGTyD,EYnK0B,gBAChC/L,IAAAA,WACAmH,IAAAA,MACAoD,IAAAA,iBAMAtI,eACE,gBAAGlD,IAAAA,MAAOqD,IAAAA,eACR+E,SAAAA,EAAOhG,eAAPgG,EAAOhG,gBACPoJ,EAAU,CAAEnI,SAAAA,EAAUrD,MAAOiB,EAAajB,EAAQ,EAAIA,MAExD,CAACwL,EAAWpD,EAAOnH,IZqJGgM,CAAmB,CAAEhM,WAAAA,EAAYmH,MAAAA,EAAOoD,UAAAA,UACzD,CACLzC,WAAY+D,EACZI,6BAAetD,SAAAA,EAAW5J,SAAS,KACnCgN,gBAAAA,GHjGqDG,MAClD5Q,GACHgG,MAAAA,EACAnF,WAAAA,EACAG,iBAAAA,EACAgK,eAAAA,EACAlF,gBAAAA,KANM0G,IAAAA,WAAYiE,IAAAA,gBAAiBE,IAAAA,cAS/BE,EAAiB1R,EAAgB,CAAC,YAAaa,EAAMkB,MAAOlB,EAAMmB,YAClE2P,EAAgB3R,EAAgB,CAAC,WAAYa,EAAMmB,YAEnD4P,EgBvFyB,gBAC/B/P,IAAAA,iBACAuK,IAAAA,oBAKA5E,eACE,SAAClD,GACCzC,EAAiBmD,SAASV,GACtB8H,EAAavK,EAAiB1B,QAAO,SAAAqF,UAAKA,IAAMlB,MAChD8H,YAAiBvK,GAAkByC,OAEzC,CAACzC,EAAkBuK,IhB0EEyF,CAAkB,CAAEzF,aAAAA,EAAcvK,iBAAAA,IACnDiQ,EiBxF6B,gBAAGjQ,IAAAA,wBACtC2F,eACE,SAACf,UACC5E,EAAiBiD,OAAS,GAAIjD,EAAiBmD,SAASyB,KAC1D,CAAC5E,IjBoFwBkQ,CAAsB,CAAElQ,iBAAAA,OAE/CwL,EAAWvI,QAAU,SAMhB/B,gCAAGlC,EAAMc,cAIZqQ,EAAU3E,EAAWJ,KAAI,SAACgF,EAAMxL,OAC9ByL,EAAmB3M,EAAakB,EAAYA,EAAY,SAE5D1D,gBAACA,EAAMoP,UAAS9I,IAAK5C,GAClBA,EAAY,GAAK,EAChB1D,gBAACyD,GACC6C,eAAgB6I,EAChB3Q,YAAauQ,EAAmBI,GAChCxQ,WAAYA,EACZmF,MAAOA,EACP9E,MAAOlB,EAAMkB,MACbC,UAAWwP,IAAkBU,EAAmBP,EAAgB9Q,EAAMmB,UACtEyE,UAAWyL,EACXpL,eAAgBjG,EAAMiG,eACtBH,gBAAiBA,EACjBD,cAAe4K,EACf1K,iBAAkBgL,IAElB,KACJ7O,gBAACK,GACCiG,YAAa5C,EACb7E,WAAYqQ,EAAKjP,IACjB3B,KAAM4Q,EAAK5Q,KACXE,YAAauQ,EAAmBrL,GAChC5E,iBAAkBA,EAClBE,MAAOlB,EAAMkB,MACbL,WAAYA,EACZJ,QAAS+C,EAAWoC,EAAW5F,EAAM0D,UACrCvC,UAAWnB,EAAMmB,UACjBF,wBAAmB6E,SAAAA,EAAiBgF,0BACpCnK,yBAAoBmF,SAAAA,EAAiB+E,YAEpCuG,EAAK1E,iBAOZxK,gBAAC0C,GAAQ4D,IAAI,mBAAmBrH,UAAW0P,EAAgB3P,MAAOlB,EAAMkB,OACrEiQ,IAIPpG,GAAUzI,YAAc"}